generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id         String   @id @default(uuid())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  fullname   String   @db.VarChar
  email      String   @unique @db.VarChar
  password   String   @db.VarChar
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  role       role     @default(user)
}

model LPK {
  id                  String   @id @default(uuid())
  name                String
  type                String
  locations           String
  programs            String[]
  status              String
  accreditationNumber String
  contactPerson       String
  phone               String
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  updated_at          DateTime @default(now()) @db.Timestamptz(6)
}

model partnership {
  id            String   @id @default(uuid())
  partnerName   String
  category      String   
  scope         String
  pksNumber     String
  region        String
  trainingsHeld Int
  startDate     DateTime
  endDate       DateTime
  status        String   

  contactPerson String?  
  email         String?
  phoneNumber   String?
  logoUrl       String?

  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @db.Timestamptz(6)
}

model Training {
  id                String      @id @default(uuid())
  title             String
  instructor        String
  duration          String
  participants      Int
  maleParticipants  Int
  femaleParticipants Int
  trainersCount     Int
  startDate         DateTime
  endDate           DateTime
  location          String
  status            String
  type              String

  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @db.Timestamptz(6)
}

model CompletedTraining {
  id              String      @id @default(uuid())
  title           String
  participants    Int
  startDate       DateTime
  endDate         DateTime
  duration        String
  location        String
  totalCertificate Int
  certificate     String
  satisfaction    Int

  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @db.Timestamptz(6)
}

model Activity {
  id           String      @id @default(uuid())
  title        String
  date         DateTime
  location     String
  type         String
  participants Int
  photos       Int
  description  String
  image        String    
  photosUrl    String?   

  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @db.Timestamptz(6)
}

model Curriculum {
  id          String      @id @default(uuid())
  title       String
  field       String
  level       String
  duration    String       
  lastUpdated DateTime
  version     String
  status      String
  description String
  modules     Int
  fileLink    String?    

  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @db.Timestamptz(6)
}

model Lecturer {
  id           String      @id @default(uuid())
  name                String
  photo               String
  expertise           String[]   
  position            String
  education           String
  experience          String
  certifications      String[]   
  email               String     @unique
  phone               String?
  trainings_conducted Int
  participants_trained Int
  status              String
  type                String


  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @db.Timestamptz(6)
}





enum role {
  user
  admin
}

